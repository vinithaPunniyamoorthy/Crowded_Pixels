import cv2
import numpy as np
import os

# Function for area calculation
def calculate_area(mask):
    # Calculate the area of the segmented region
    area = np.sum(mask) / 255.0  # Convert to binary mask (0 or 255)
    return area

# Function for intensity analysis
def analyze_intensity(segmented_image):
    # Convert the segmented image to grayscale
    gray_image = cv2.cvtColor(segmented_image, cv2.COLOR_BGR2GRAY)
    
    # Compute the mean intensity of the segmented region
    mean_intensity = np.mean(gray_image)
    return mean_intensity

# Function for comparing growth over 5 days
def compare_growth(data):
    # Assuming 'data' is a list of area or intensity values for each day
    growth_rate = []
    for i in range(1, len(data)):
        rate = (data[i] - data[i-1]) / data[i-1]
        growth_rate.append(rate)
    return growth_rate

# Load segmented images for each day
segmented_images = []
for day in range(1,21):
    image_path = f"cropped_image_{day}.jpg"
    if os.path.exists(image_path):
        segmented_image = cv2.imread(image_path)
        segmented_images.append(segmented_image)
    else:
        print(f"Error: Image for day {day} not found.")
        segmented_images.append(None)

# Calculate area and intensity for each day
area_data = []
intensity_data = []
for segmented_image in segmented_images:
    if segmented_image is not None:
        # Threshold the image to obtain the mask of the black fungus colony
        _, binary_image = cv2.threshold(cv2.cvtColor(segmented_image, cv2.COLOR_BGR2GRAY), 1, 255, cv2.THRESH_BINARY)
        area = calculate_area(binary_image)
        intensity = analyze_intensity(segmented_image)
        area_data.append(area)
        intensity_data.append(intensity)
    else:
        area_data.append(None)
        intensity_data.append(None)

# Compare growth over 5 days
area_growth_rate = compare_growth(area_data)
intensity_growth_rate = compare_growth(intensity_data)

# Print or visualize the results
print("Area Data (in pixels squared):", area_data)
print("Intensity Data (mean intensity):", intensity_data)
print("Area Growth Rate:", area_growth_rate)
print("Intensity Growth Rate:", intensity_growth_rate)
# Display segmented images and analysis results
for day, (segmented_image, area, intensity) in enumerate(zip(segmented_images, area_data, intensity_data), start=1):
    if segmented_image is not None:
        # Display segmented image
        cv2.imshow(f"Click {day} - Segmented Image", segmented_image)
        
        # Print area and intensity data
        print(f"Click {day} - Area: {area} pixels squared")
        print(f"Click {day} - Mean Intensity: {intensity}")

        # Display image of fungus growth
        cv2.imshow(f"Fungus Growth - Click {day}", segmented_image)
        
    else:
        print(f"Error: Image for day {day} not found.")

    # Wait for key press to move to next image or exit
    key = cv2.waitKey(0)
    if key == 27:  # Esc key to exit
        break
    cv2.destroyAllWindows()
